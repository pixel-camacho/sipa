import RouteRecognizer from 'route-recognizer';
import { Dict } from '../core';
import HandlerInfo, { IHandler, UnresolvedHandlerInfoByObject, UnresolvedHandlerInfoByParam } from '../handler-info';
import { GetHandlerFunc, GetSerializerFunc, SerializerFunc } from '../router';
import { TransitionIntent } from '../transition-intent';
import TransitionState from '../transition-state';
export default class NamedTransitionIntent extends TransitionIntent {
    name: string;
    pivotHandler?: IHandler;
    contexts: Dict<unknown>[];
    queryParams: Dict<unknown>;
    preTransitionState?: TransitionState;
    constructor(name: string, pivotHandler: IHandler | undefined, contexts?: Dict<unknown>[], queryParams?: Dict<unknown>);
    applyToState(oldState: TransitionState, recognizer: RouteRecognizer, getHandler: GetHandlerFunc, isIntermediate: boolean, getSerializer: GetSerializerFunc): TransitionState;
    applyToHandlers(oldState: TransitionState, handlers: IHandler[], getHandler: GetHandlerFunc, targetRouteName: string, isIntermediate: boolean, checkingIfActive: boolean, getSerializer: GetSerializerFunc): TransitionState;
    invalidateChildren(handlerInfos: HandlerInfo[], invalidateIndex: number): void;
    getHandlerInfoForDynamicSegment(name: string, getHandler: GetHandlerFunc, names: string[], objects: Dict<unknown>[], oldHandlerInfo: HandlerInfo, _targetRouteName: string, i: number, serializer: SerializerFunc): HandlerInfo | UnresolvedHandlerInfoByObject;
    createParamHandlerInfo(name: string, getHandler: GetHandlerFunc, names: string[], objects: Dict<unknown>[], oldHandlerInfo: HandlerInfo): UnresolvedHandlerInfoByParam;
}
